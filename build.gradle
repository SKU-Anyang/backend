plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain { languageVersion = JavaLanguageVersion.of(17) }
}

configurations {
	compileOnly { extendsFrom annotationProcessor }
}

/* repositories { ... } 블록은 넣지 마세요 (settings.gradle에서 관리 중) */

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
	implementation 'org.apache.commons:commons-csv:1.11.0'


	// ✅ Gemini 공식 Java SDK (Google GenAI SDK)
	//implementation 'com.google.genai:google-genai:1.14.0'

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// DB
	runtimeOnly 'com.mysql:mysql-connector-j'

	runtimeOnly "io.netty:netty-resolver-dns-native-macos:4.1.123.Final:osx-aarch_64"


	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') { useJUnitPlatform() }
