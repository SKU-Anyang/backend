package com.example.An_Yang.service;

import com.example.An_Yang.domain.ChatHistory;
import com.example.An_Yang.repository.ChatHistoryRepository;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.JsonNode;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

@Service
public class GptService {

    @Value("${openai.api-key}")
    private String apiKey;

    @Value("${openai.model}")
    private String model;

    @Value("${openai.max-tokens}")
    private int maxTokens;

    @Value("${openai.temperature}")
    private double temperature;

    private final RestTemplate restTemplate;
    private final ChatHistoryRepository chatHistoryRepository;
    private final ObjectMapper objectMapper;

    public GptService(ChatHistoryRepository chatHistoryRepository) {
        this.chatHistoryRepository = chatHistoryRepository;
        this.restTemplate = new RestTemplate();
        this.objectMapper = new ObjectMapper();
    }

    public String getGptResponse(String userQuestion) {
        try {
            // 시스템 프롬프트 설정 (사장님 도우미 역할)
            String systemPrompt = "당신은 창업 전문가 '사장님 도우미'입니다. " +
                    "사용자의 창업 관련 질문에 대해 실용적이고 구체적인 조언을 제공해주세요. " +
                    "한국어로 친근하고 이해하기 쉽게 답변해주세요. " +
                    "창업 초보자도 이해할 수 있도록 단계별로 설명해주세요.";

            // OpenAI API 요청 데이터 구성
            Map<String, Object> requestBody = new HashMap<>();
            requestBody.put("model", model);
            requestBody.put("max_tokens", maxTokens);
            requestBody.put("temperature", temperature);

            List<Map<String, String>> messages = List.of(
                Map.of("role", "system", "content", systemPrompt),
                Map.of("role", "user", "content", userQuestion)
            );
            requestBody.put("messages", messages);

            // HTTP 헤더 설정
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            headers.setBearerAuth(apiKey);

            HttpEntity<Map<String, Object>> request = new HttpEntity<>(requestBody, headers);

            // OpenAI API 호출
            ResponseEntity<String> response = restTemplate.postForEntity(
                "https://api.openai.com/v1/chat/completions",
                request,
                String.class
            );

            // 응답 파싱
            JsonNode responseJson = objectMapper.readTree(response.getBody());
            String gptResponse = responseJson.get("choices").get(0).get("message").get("content").asText();

            // 채팅 히스토리에 저장
            ChatHistory chatHistory = new ChatHistory(userQuestion, gptResponse, LocalDateTime.now());
            chatHistoryRepository.save(chatHistory);

            return gptResponse;

        } catch (Exception e) {
            e.printStackTrace();
            return "죄송합니다. 일시적인 오류가 발생했습니다. 잠시 후 다시 시도해주세요.";
        }
    }

    public List<ChatHistory> getChatHistory() {
        return chatHistoryRepository.findAllOrderByAskedAtDesc(org.springframework.data.domain.PageRequest.of(0, 20));
    }

    // 폐업 리스크 분석 기능
    public String analyzeBusinessRisk(String businessType, String location, String investmentAmount, String experience) {
        try {
            String systemPrompt = "당신은 창업 리스크 분석 전문가입니다. " +
                    "사용자가 제공한 정보를 바탕으로 폐업 리스크를 분석하고 구체적인 위험 요소와 대응 방안을 제시해주세요. " +
                    "다음 형식으로 답변해주세요:\n\n" +
                    "📊 폐업 리스크 분석 결과\n" +
                    "• 리스크 레벨: (높음/보통/낮음)\n" +
                    "• 주요 위험 요소:\n" +
                    "• 대응 방안:\n" +
                    "• 추가 고려사항:";

            String userPrompt = String.format(
                "사업 종류: %s\n위치: %s\n투자 금액: %s\n경험 수준: %s\n\n위 정보를 바탕으로 폐업 리스크를 분석해주세요.",
                businessType, location, investmentAmount, experience
            );

            return callGptApi(systemPrompt, userPrompt);

        } catch (Exception e) {
            e.printStackTrace();
            return "죄송합니다. 리스크 분석 중 오류가 발생했습니다.";
        }
    }

    // 창업 추천 기능
    public String recommendBusiness(String businessType, String preferredLocation, String budget) {
        try {
            String systemPrompt = "당신은 창업 추천 전문가입니다. " +
                    "사용자가 원하는 사업 종류와 선호 지역, 예산을 바탕으로 구체적인 추천을 해주세요. " +
                    "다음 형식으로 답변해주세요:\n\n" +
                    "🎯 창업 추천 결과\n" +
                    "• 추천 지역:\n" +
                    "• 추천 프랜차이즈/브랜드:\n" +
                    "• 예상 투자 비용:\n" +
                    "• 월 예상 매출:\n" +
                    "• 성공 팁:";

            String userPrompt = String.format(
                "원하는 사업: %s\n선호 지역: %s\n예산: %s\n\n위 조건에 맞는 창업을 추천해주세요.",
                businessType, preferredLocation, budget
            );

            return callGptApi(systemPrompt, userPrompt);

        } catch (Exception e) {
            e.printStackTrace();
            return "죄송합니다. 창업 추천 중 오류가 발생했습니다.";
        }
    }

    // 공통 GPT API 호출 메서드
    private String callGptApi(String systemPrompt, String userPrompt) {
        try {
            Map<String, Object> requestBody = new HashMap<>();
            requestBody.put("model", model);
            requestBody.put("max_tokens", maxTokens);
            requestBody.put("temperature", temperature);

            List<Map<String, String>> messages = List.of(
                Map.of("role", "system", "content", systemPrompt),
                Map.of("role", "user", "content", userPrompt)
            );
            requestBody.put("messages", messages);

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            headers.setBearerAuth(apiKey);

            HttpEntity<Map<String, Object>> request = new HttpEntity<>(requestBody, headers);

            ResponseEntity<String> response = restTemplate.postForEntity(
                "https://api.openai.com/v1/chat/completions",
                request,
                String.class
            );

            JsonNode responseJson = objectMapper.readTree(response.getBody());
            return responseJson.get("choices").get(0).get("message").get("content").asText();

        } catch (Exception e) {
            e.printStackTrace();
            return "죄송합니다. 일시적인 오류가 발생했습니다.";
        }
    }
}


